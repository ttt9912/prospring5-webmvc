package ch.restsecurity.webconfig;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;

/*
 * Configure, who can access the application and what they
 * are allowed to do (using in-memory authentication here)
 *
 * @EnableWebMvc: enables secured behaviour in a spring web app
 *
 * springSecurityFilterChain: enables spring to intercept http requests
 * for authentication and authorization checks.
 * Here, only rest URLs (/rest/*) are secured
 *
 * Login page is generated by spring and accessible under:
 * localhost:9084/restful-ws-security/login
 */
@Slf4j
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    /*
     * define a simple authentication provider with user and password hardcoded
     * (in real app: database or LDAP lookup)
     */
    @Autowired
    protected void configureGlobal(final AuthenticationManagerBuilder auth) throws Exception {
        try {
            auth.inMemoryAuthentication()
                    .withUser("prospring5")
                    .password("prospring5")
                    .roles("REMOTE");
        } catch (Exception e) {
            log.error("Could not configure authentication", e);
        }
    }

    /*
     * resources under URL /rest/** should be protected
     *
     * .sessionCreationPolicy(): configure whether http session will be created upon
     *                          authentication
     *
     * SessionCreationPolicy.STATELESS: instructs spring not to create an http session
     *                                  for all rest requests (because our rest service
     *                                  is stateless)
     *
     * .antMatchers("/rest/**"): only users with REMOTE role can access the rest service
     *                           secures all rest URLs but allows the user to see the main page
     *
     * .httpBasic(): only http basic authentication is supported
     *
     * .formLogin(): lets spring generate a simple login form, accessible under:
     *               localhost:9084/restful-ws-security/login
     */
    @Override
    protected void configure(final HttpSecurity http) throws Exception {
        http.sessionManagement()
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
                .authorizeRequests()
                .antMatchers("/**").permitAll()
                .antMatchers("/rest/**").hasRole("REMOTE").anyRequest().authenticated()
                .and()
                .formLogin()
                .and()
                .httpBasic()
                .and().csrf().disable();
    }
}
